## model 3 - different delta-LR for two tasks, and same for feedback and confidence

model {
        
## hyperpriors

spe_global ~ dbeta(1,1)
spe_perc <- spe_global
spe_mem <- spe_global

log_v0_perc ~ dnorm(-3,10) # prior of beta variance for perception - mean at log(.05)
log_v0_mem ~ dnorm(-3,10) # prior of beta variance for memory
v0_init[1] <- exp(log_v0_perc)
v0_init[2] <- exp(log_v0_mem)

# difference between learning from pos and neg feedback
posneg_fact_fb_perc ~ dnorm(0,1) I(-2,2) # difference between learning from pos and neg feedback
posneg_fact_fb_mem ~ dnorm(0,1) I(-2,2)

lr_pos_fb_perc <- 1 + posneg_fact_fb_perc/2
lr_neg_fb_perc <- 1 - posneg_fact_fb_perc/2
lr_pos_fb_mem <- 1 + posneg_fact_fb_mem/2
lr_neg_fb_mem <- 1 - posneg_fact_fb_mem/2

# difference between learning from high and low confidence
posneg_fact_conf_perc <- posneg_fact_fb_perc
posneg_fact_conf_mem <- posneg_fact_fb_mem

lr_pos_conf_perc <- 1 + posneg_fact_conf_perc/2
lr_neg_conf_perc <- 1 - posneg_fact_conf_perc/2
lr_pos_conf_mem <- 1 + posneg_fact_conf_mem/2
lr_neg_conf_mem <- 1 - posneg_fact_conf_mem/2

beta_post_bias <-0     # to regress SPE prior - currently not used
beta_fb_lr <-0    # to regress difference in learning from pos and neg feedback
beta_conf_lr <- beta_fb_lr    # to regress difference in learning from high and low confidence

dec_var[1]<-0      # if each run starts with a bit more certainty on spe
dec_var[2]<-0       # to change variance after each run - currently not used#
#dec_var[1] ~ dnorm(0,1)   # if each run starts with a bit more certainty on spe
#dec_var[2] ~ dnorm(0,1)   # to change variance after each run - currently not used

    for (ns in 1:nsubj) {

        # starting values of SPE for the two tasks 
        spe_init[ns,1,1] <- spe_perc #+ #beta_base*cov[ns] # perc task, block 1
        spe_init[ns,2,1] <- spe_mem #+ #beta_base*cov[ns] # perc task, block 1

        #v0_init[ns,1,1] <- v0_perc
        #v0_init[ns,2,1] <- v0_mem

        task_nblocks[ns,1,1] <- 0 # use for changing variance after each run - currently not used
        task_nblocks[ns,2,1] <- 0 # use for changing variance after each run - currently not used

        for (nb in 1:nblocks) {

            task_nblocks[ns,1,nb+1] <- ifelse(task[ns,nb]==0, task_nblocks[ns,1,nb]+1, task_nblocks[ns,1,nb])
            task_nblocks[ns,2,nb+1] <- ifelse(task[ns,nb]==1, task_nblocks[ns,2,nb]+1, task_nblocks[ns,2,nb])

            # starting values of SPE depending on the task for this block
            spe_init_block[ns,nb] <- spe_init[ns,task[ns,nb]+1,nb] 
            #var_init_block[ns,nb] <- v0_init[ns,task[ns,nb]+1,nb] + inc_var[task[ns,nb]+1]*(task_nblocks[ns,task[ns,nb]+1,nb+1]-1)
            var_init_block[ns,nb] <- v0_init[task[ns,nb]+1] - dec_var[task[ns,nb]+1]*(task_nblocks[ns,task[ns,nb]+1,nb+1]-1)

            # starting values of SPE variance depending on the task for this block
            #var_init_block[ns,nb] <- ifelse(task[ns,nb]==1, v0_mem , v0_perc)

            # choose pos and neg fb learning rate depending on the task for this block
            lr_fb_pos[ns,nb] <- ifelse(task[ns,nb]==1, lr_pos_fb_mem + beta_fb_lr*cov[ns]/2, lr_pos_fb_perc + beta_fb_lr*cov[ns]/2)
            lr_fb_neg[ns,nb] <- ifelse(task[ns,nb]==1, lr_neg_fb_mem - beta_fb_lr*cov[ns]/2, lr_neg_fb_perc - beta_fb_lr*cov[ns]/2)

            # choose high and low conf learning rate depending on the task for this block
            lr_conf_pos[ns,nb] <- ifelse(task[ns,nb]==1, lr_pos_conf_mem + beta_conf_lr*cov[ns]/2, lr_pos_conf_perc + beta_conf_lr*cov[ns]/2)
            lr_conf_neg[ns,nb] <- ifelse(task[ns,nb]==1, lr_neg_conf_mem - beta_conf_lr*cov[ns]/2, lr_neg_conf_perc - beta_conf_lr*cov[ns]/2)

            # initial values of a, b
            aa[nb,1,ns] <- (spe_init_block[ns,nb]/var_init_block[ns,nb])*(spe_init_block[ns,nb]-spe_init_block[ns,nb]^2-var_init_block[ns,nb])
            bb[nb,1,ns] <- ((spe_init_block[ns,nb]-spe_init_block[ns,nb]^2-var_init_block[ns,nb])*(1-spe_init_block[ns,nb]))/var_init_block[ns,nb]
            
            for (nt in 1:ntrials[nb]) {
                
                # update a and b
                aa[nb,nt+1,ns] <- ifelse(feedback[ns,nb,nt], ifelse(corr[ns,nb,nt], aa[nb,nt,ns]+lr_fb_pos[ns,nb], aa[nb,nt,ns]), aa[nb,nt,ns]+lr_conf_pos[ns,nb]*conf[ns,nb,nt])
                bb[nb,nt+1,ns] <- ifelse(feedback[ns,nb,nt], ifelse(corr[ns,nb,nt], bb[nb,nt,ns], bb[nb,nt,ns]+lr_fb_neg[ns,nb]), bb[nb,nt,ns]+lr_conf_neg[ns,nb]*(1-conf[ns,nb,nt]))

                }
                
            # fit the SPE data
            spe[ns,nb] ~ dbeta(aa[nb,ntrials[nb]+1,ns], bb[nb,ntrials[nb]+1,ns])
     
            # posterior distribution of SPE
            spe_est[ns,nb] <- aa[nb,ntrials[nb]+1,ns]/(aa[nb,ntrials[nb]+1,ns] + bb[nb,ntrials[nb]+1,ns])
            
            # posterior distribution of SPE fit difference
            spe_diff[ns,nb] <- spe[ns,nb] - spe_est[ns,nb]

            # update new starging point of SPE mean
            spe_init[ns,1,nb+1] <- ifelse(task[ns,nb]==0, spe_est[ns,nb], spe_init[ns,1,nb]) # if cur task is perception, update prior for the next block with new spe, otherwise previous
            spe_init[ns,2,nb+1] <- ifelse(task[ns,nb]==1, spe_est[ns,nb], spe_init[ns,2,nb])# if cur task is memory right, update new spe, otherwise previous

            #v0_next[ns,nb] <- (aa[nb,ntrials[nb]+1,ns] * bb[nb,ntrials[nb]+1,ns])/(((aa[nb,ntrials[nb]+1,ns] + bb[nb,ntrials[nb]+1,ns])^2) * (aa[nb,ntrials[nb]+1,ns] + bb[nb,ntrials[nb]+1,ns] +1))

            #v0_init[ns,1,nb+1] <- ifelse(task[ns,nb]==0, v0_next[ns,nb], v0_init[ns,1,nb]) # if cur task is perception, update prior for the next block with new spe, otherwise previous
            #v0_init[ns,2,nb+1] <- ifelse(task[ns,nb]==1, v0_next[ns,nb], v0_init[ns,2,nb])# if cur task is memory right, update new spe, otherwise previous

           }

      }
                
}
